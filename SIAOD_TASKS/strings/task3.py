def count_of_conc(string):
    """ Функция возвращает количество отдельных непустых подстрок текста, которые могут
    быть записаны как конкатенация некоторой строки с самой собой """
    counter = 0
    res = [string[i: j] for i in range(len(string))  # res - коллекция всевозможных подстрок string
           for j in range(i + 1, len(string) + 1)]
    lfl = []
    for i in res:  # i - текущая рассматриваемая подстрока
        if (len(i) % 2) == 0:  # Проверка на четность (ведь в строке должно быть две одинаковых подстроки)
            s1 = i[0:(len(i)//2)]  # Первая половина строки
            s2 = i[(len(i)//2):len(i)]  # Вторая половина строки
            if s1 == s2:  # Если они равны и не были рассмотрены ранее, добавляем их в список который позже вернем
                if not (lfl.__contains__(s1+s2)):
                    counter += 1
                    lfl.append(s1+s2)
    return counter

if __name__ == '__main__':
    print('Введите строку:')
    s1 = input()
    print(count_of_conc(s1))
